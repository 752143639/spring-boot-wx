<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--可以引入外部properties文件
        resource 类路径文件引入


        <properties  resource="">


        </properties>
        -->
    <!--环境变量配置，
       environment配置具体环境
       id="xxx：代表唯一标示，代表一种环境，可以使用environments default="xxx"指定使用的环境
    -->
    <!--<environments default="development">-->
        <!--<environment id="development">-->
           <!--事务管理类型，1.jdbc;2MANAGED – 这个配置就是直接使用了 JDBC 的提交和回滚设置，它依赖于从数据源得到的连接来管理事务作用域。
                   MANAGED – 这个配置几乎没做什么。
                  它从来不提交或回滚一个连接，而是让容器来管理事务的整个生命周期
                  （比如 JEE 应用服务器的上下文）。 默认情况下它会关闭连接，
                  然而一些容器并不希望这样，因此需要将 closeConnection 属性设置为 false 来阻止它默认的关闭行为
                  3.自定义事务管理  :实现TransactionFactory 接口

                  -->

            <!--<transactionManager type="JDBC" />-->
            <!--
            dataSource 分为三种：
            UNPOOLED|POOLED|JNDI]
            自定义数据源：实现DataSourceFactory
            -->
            <!--<dataSource type="POOLED">-->
                <!--<property name="driver" value="${driver}"/>-->
                <!--<property name="url" value="${url}"/>-->
                <!--<property name="username" value="${username}"/>-->
                <!--<property name="password" value="${password}"/>-->
            <!--</dataSource>-->
        <!--</environment>-->
    <!--</environments>-->
    <!--<mappers>-->
        <!--&lt;!&ndash;mapper resource="com/springriver/example/mybatis/mapper/*Mapper.xml" /&ndash;&gt;-->
        <!--<package name="com/springriver/example/mybatis/mapper"/>-->
    <!--</mappers>-->
<!--
  settings 设置项
-->


<!--别名处理器

<typeAliases>
      不建议使用，建议使用全类名方式
     为某个java 起别名 默认小写author（别名不区别大小）,也可以alias="Author" 自定义
    <typeAlias alias="Author" type="domain.blog.Author"/>
     为某个包下，所有属性进行默认别名,注意：存在别名冲突问题（子包下存在相同java），可以在java实体类使用@Alias（“xxx”）注解指定新的别名
     <package name=""></package>
</typeAliases>
-->
    <settings>
        <!--是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。
          数据库列名 A_COLUMN
           Java 属性名 aColumn
        -->
        <!--针对Oracle插入null数据失败：mybatis使用的jdbcType.other，oracle无法识别，修改后改为jdbcType.NUll-->
        <setting name="jdbcTypeForNull" value="NULL"></setting>
        <!--懒加载-->
        <setting name="lazyLoadingEnabled" value="true"></setting>
        <!--侵入lazyLoadingEnabled-->
        <setting name="aggressiveLazyLoading" value="false"></setting>
        <setting name="mapUnderscoreToCamelCase" value="true"/>

        <setting name="logImpl" value="STDOUT_LOGGING"></setting>
    </settings>
   <!--通配多数据库厂商sql-->
    <databaseIdProvider type="DB_VENDOR">
        <!--为不同数据库起别名  对应mapper文件中的databaseId-->
        <property name="SQL Server" value="sqlserver"/>
        <property name="DB2" value="db2"/>
        <property name="Oracle" value="oracle" />
        <property name="MySQL" value="mysql" />
    </databaseIdProvider>
    <!--映射
  <mappers >
    类路径映射
  <mapper resource=""></mapper>
   远程地址映射
  <mapper url=""></mapper>
    class文件映射，需要xml..,mapper文件与class放在同一目录下，并且xml与接口class同名；2：可以基于注解
   <mapper class=""></mapper>
   批量映射 :,mapper文件与class放在同一目录下，并且xml与接口class同名
   <package name=""
  </mappers >
  -->


</configuration>